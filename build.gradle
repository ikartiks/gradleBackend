/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'eclipse-wtp'


buildscript {
       repositories {
             jcenter()
       }
       dependencies {
             classpath 'com.bmuschko:gradle-tomcat-plugin:2.4.1'
       }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    def tomcatVersion = '8.0.46'
    def springWebMvcVersion = '5.0.2.RELEASE'
    def springSecurityVersion = '5.0.0.RELEASE'
    def springAopVersion = '5.0.4.RELEASE'
    
	tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
	"org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
	"org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
	
	
	compile 'javax.servlet.jsp:javax.servlet.jsp-api:2.3.1'
	compile "org.springframework:spring-context-support:${springWebMvcVersion}"
	compile "org.springframework:spring-webmvc:${springWebMvcVersion}"
	compile "org.springframework:spring-jdbc:${springWebMvcVersion}"
	compile "org.springframework:spring-orm:${springWebMvcVersion}"
	compile "org.springframework:spring-test:${springWebMvcVersion}"
	compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
	compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
	compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
	compile "org.springframework:spring-aop:${springAopVersion}"
	
	//jax rs
	compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
 
 	//log4j for printing tomcat logs in console
	compile 'org.apache.logging.log4j:log4j-api:2.10.0'
	compile 'org.apache.logging.log4j:log4j-core:2.10.0'
	
	//for logger class in our java files, note its different from above
	compile group: 'log4j', name: 'log4j', version: '1.2.17'
	
	
	//jersey rest
	compile 'org.glassfish.jersey.core:jersey-server:2.26'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.26'
    compile 'org.glassfish.jersey.core:jersey-common:2.26'
	compile 'org.glassfish.jersey.inject:jersey-hk2:2.26'
	
	//jersey uses gson to convert pojo
	//not 2 classes GsonReader.java and GsonWriter.java in jersey.rest package
	//without it this wont work
	//it throws an error saying message writer not found for object
	compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

    

	
 
}

tomcat {
	 httpPort = 8080
	 contextPath = '/kartik'
}
