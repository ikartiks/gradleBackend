<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee   
    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	
	<!--  
		log4j2 does not require defining a listener. it is added by default.
	  	https://logging.apache.org/log4j/2.x/manual/webapp.html
	  	Note in case of gradle log4j2.xml is picked up from resources folder
	 -->
    
    <context-param>
        <param-name>log4jConfiguration</param-name>
        <param-value>log4j2.xml</param-value>
    </context-param>
    
    <!-- log4j2 config ends -->
	
	<!-- this is required for spring mvc to work, default servlet redirect to things mentioned in applicationContext.xml -->
	<servlet>
		<servlet-name>mvc-dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
	      <param-name>contextConfigLocation</param-name>
	      <param-value>/WEB-INF/applicationContext.xml</param-value>
	    </init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- we want spring rest to work only for urls starting with /springrest/ as otherwise it will try to find a view for index.html as well. -->
	<servlet-mapping>
		<servlet-name>mvc-dispatcher</servlet-name>
		<url-pattern>/springrest/*</url-pattern>
	</servlet-mapping>
	
	<!-- this is required for spring mvc to work, default servlet redirect to things mentioned in applicationContext.xml ends -->
	
	<!-- this is not needed,everything in above config is true.
		note revist org.springframework.web.context.ContextLoaderListener if required
	 listener and context-param for applicationContext.xml file  
	
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext.xml</param-value>
	</context-param>
	-->
	
	<!-- Jersey rest -->
	
	<!-- without below listener spring mvc works fine but not jersey.
		No WebApplicationContext found: no ContextLoaderListener registered? 
	 	It loads your configuration files.
	 	In the web MVC framework, each DispatcherServlet has its own WebApplicationContext, which inherits all the beans already defined in
	  	the root WebApplicationContext. These inherited beans defined can be overridden in the servlet-specific scope, and new scope-specific
	   	beans can be defined local to a given servlet instance.
		The dispatcher servlet's application context is a web application context which is only applicable for the Web classes .
		You cannot use these for your middle tier layers . These need a global app context using ContextLoaderListener .

		Read the spring reference here for spring mvc .
		https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/mvc.html
		
		also if laod on startup init param is 1 and not 2 it will give below error as spring servlet is loaded first, which has <load-on-startup>1</load-on-startup>
		ClassNotFoundException: com.sun.jersey.spi.spring.container.servlet.SpringServlet
		
		https://www.javatpoint.com/load-on-startup
		
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
		<!--  this is used for spring rest  -->
	</listener>
	
	<listener>
			<!--  this is used for jersey rest  -->
	
            <listener-class>
                    org.springframework.web.context.request.RequestContextListener 
            </listener-class>
  </listener>
	
	 <servlet>
	    <servlet-name>Jersey REST Service</servlet-name>
	    <!-- <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class> -->
	    <servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
		<init-param>
			<param-name>jersey.config.server.provider.packages</param-name>
	        <param-value>com.kartiks.jersey.rest</param-value>
	    </init-param>
	    <!-- mapping java resource to json directly -->
	    <init-param>
			<param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- Enable Tracing support. -->
        <init-param>
            <param-name>jersey.config.server.tracing</param-name>
            <param-value>ALL</param-value>
        </init-param>
	    <load-on-startup>2</load-on-startup>
	  </servlet>
	  <servlet-mapping>
	    <servlet-name>Jersey REST Service</servlet-name>
	    <url-pattern>/rest/*</url-pattern>
	  </servlet-mapping>
	  
	  <!-- Jersey rest ends -->
	
	<!-- for no timeout in spring security -->
	<session-config>
    		<session-timeout>-1</session-timeout>
	</session-config>
	
	
</web-app>